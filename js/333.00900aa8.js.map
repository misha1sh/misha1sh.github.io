{"version":3,"file":"js/333.00900aa8.js","mappings":"4GAGA,IAAIA,EAAY,WAIf,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXC,EAAAA,EAA0B,OAAOA,EAAAA,EAC5C,MAAM,IAAIC,MAAM,iCACjB,EAEIC,EAAeL,IAEnBM,EAAOC,QAAUA,EAAUF,EAAaG,MAGpCH,EAAaG,QAChBD,EAAAA,WAAkBF,EAAaG,MAAMC,KAAKJ,IAG3CE,EAAQG,QAAUL,EAAaK,QAC/BH,EAAQI,QAAUN,EAAaM,QAC/BJ,EAAQK,SAAWP,EAAaO,Q","sources":["webpack://app-web/./node_modules/node-fetch/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":["getGlobal","self","window","global","Error","globalObject","module","exports","fetch","bind","Headers","Request","Response"],"sourceRoot":""}